///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

#Если Клиент Тогда

Перем мНетОшибки;
Перем мОшибкаПараметровНастройки;
Перем мОшибкаЗагрузкиДрайвера;
Перем мОшибкаНеизвестно;
Перем мОшибкаПриПодключении;
Перем мОшибкаТестНеПройден;
Перем мПрефикс;
Перем мМодели Экспорт;
Перем мПротоколы Экспорт;
Перем мИдентификатор;

Перем мПараметрыУстройства, мПараметрыПодключения, мВходныеПараметры, мВыходныеПараметры, мВходныеПараметрыСтруктура;

Перем мВерсияОбработки;
Перем мВерсияТребуемая Экспорт;
Перем мВерсияИзДрайвера Экспорт;
Перем мОбновлениеМоделей;

Перем гПутьКФайуЧека, гИмяФайлаЧека, КодВозврата;
///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ОБЩИЕ ФУНКЦИИ API)

функция ПолучитьИмяКассира()
	рез = ПолноеИмяПользователя();
	возврат рез;
конецФункции //ПолучитьИмяКассира

// Функция возвращает номер версии API, поддерживаемой обработкой обслуживания.
//
// Номер версии задаётся следующим образом: Ver = Vmajor + Vminor / 100.0.
// Например, в случае, если данная функция возвращает значение «1.01», это
// означает, что данная обработка  имеет версию «1.1», полностью поддерживает
// версию «1.0» и содержит некоторые дополнительные элементы.
// В случае, если отличается целая часть версии (например, «2.1»), то это
// означает, что данная обработка несовместима с версией API «1.0».
//
// Функция является обязательной для любой версии API.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Число> - Версия API обработки обслуживания.
//
//
Функция ПолучитьВерсиюAPI() Экспорт

	Результат = 2.05;
	Возврат Результат;

КонецФункции // ПолучитьВерсиюAPI()

// Функция возвращает описание текущей обработки обслуживания (API v2.0).
//
// Данная функция позволяет серверу получить информацию об обработке
// обслуживания. Функция является обязательной для версий 1.X API.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Структура> - Структура, содержащая описание текущей обработки.
//                Структура имеет следующие поля:
//
//                Вид              - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид торгового оборудования, поддерживаемый
//                                   данной обработкой обслуживания.
//
//                СписокМоделей    - <Массив>
//                                 - Список поддерживаемых обработкой моделей
//                                   торгового оборудования.
//
//                Наименование     - <Строка>
//                                 - Наименование обработки обслуживания.
//
//                Описание         - <Строка>
//                                 - Описание обработки обслуживания.
//
//                ВерсияОбработки  - <Число>
//                                 - Номер версии обработки обслуживания
//                                   (не версии API!!!).
//                                   Данный параметр используется при
//                                   обновлении.
//                                   Номер версии задаётся следующим образом:
//                                   Ver = Vmajor + Vminor / 100.0.
//
Функция ПолучитьОписание() Экспорт

	Результат = Новый Структура("Вид, СписокМоделей, Наименование, Описание, ВерсияОбработки, Идентификатор");

	мМетаданные               = Метаданные();
	Результат.Вид             = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор;
	//Результат.Вид             = Перечисления.ВидыТорговогоОборудования.ККТ;
	Результат.СписокМоделей   = мМодели;
	Результат.Наименование    = мМетаданные.Синоним;
	Результат.Описание        = мМетаданные.Комментарий;
	Результат.ВерсияОбработки = 2.0;
	Результат.Идентификатор   = мИдентификатор;

	Возврат Результат;

КонецФункции // ПолучитьОписание()

функция ПараметрыОписанияДрайвера()
	Параметры = Новый Структура();
	Параметры.Вставить("НаименованиеДрайвера"   , Неопределено); // 
	Параметры.Вставить("ОписаниеДрайвера", Неопределено); 
	Параметры.Вставить("ТипОборудования ", Неопределено); 
	Параметры.Вставить("ИнтеграционныйКомпонент", Неопределено);
	Параметры.Вставить("ОсновнойДрайверУстановлен", Неопределено);
	Параметры.Вставить("ВерсияДрайвера", Неопределено);
	Параметры.Вставить("IntegrationComponentVersion", Неопределено);
	Параметры.Вставить("URLЗагрузкиДрайвера", Неопределено);
	Параметры.Вставить("LogIsEnabled", Неопределено);
	Параметры.Вставить("LogPath", Неопределено);	
	Возврат Параметры; 
конецФункции //ПараметрыОписанияДрайвера

функция ПолучитьОписаниеДрайвера(ОписаниеДрайвера)
	Параметры = ПараметрыОписанияДрайвера();
	Сообщить("ПолучитьОписаниеДрайвера");
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ОписаниеДрайвера);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "DriverDescription" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		//Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.НаименованиеДрайвера    = ЧтениеXML.ЗначениеАтрибута("Name");
			Параметры.ОписаниеДрайвера = ЧтениеXML.ЗначениеАтрибута("Description");
			Параметры.ТипОборудования = ЧтениеXML.ЗначениеАтрибута("EquipmentType");
			Параметры.ИнтеграционныйКомпонент = ЧтениеXML.ЗначениеАтрибута("IntegrationComponent");
			Параметры.ОсновнойДрайверУстановлен = ЧтениеXML.ЗначениеАтрибута("MainDriverInstalled");
			Параметры.ВерсияДрайвера = ЧтениеXML.ЗначениеАтрибута("DriverVersion");
			Параметры.IntegrationComponentVersion = ЧтениеXML.ЗначениеАтрибута("IntegrationComponentVersion");
			Параметры.URLЗагрузкиДрайвера = ЧтениеXML.ЗначениеАтрибута("DownloadURL");
			Параметры.LogIsEnabled = ЧтениеXML.ЗначениеАтрибута("LogIsEnabled");
			Параметры.LogPath = ЧтениеXML.ЗначениеАтрибута("LogPath");
			//Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
			//	Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
			//КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;	
конецФункции //ПолучитьОписаниеДрайвера

// Функция создаёт объект драйвера.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Выходной параметр; объект драйвера торгового
//                                   оборудования.
//
//  Модель                         - <Строка>
//                                 - Модель торгового оборудования, для которой
//                                   создаётся экземпляр драйвера.
//
//  Параметры                      - <Структура>
//                                 - Параметры подключаемого торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция СоздатьОбъектДрайвера(Объект, Модель, Параметры) Экспорт
	Результат = мНетОшибки;
	ОписаниеОшибки = "";
	ИДУстройства   = Неопределено;
	Сообщить("СоздатьОбъектДрайвера");
	Возврат Результат;

	Попытка
		Макет = ПолучитьМакет("ИнтеграционнаяКомпонента");
		Адрес = ПоместитьВоВременноеХранилище(Макет);
		ПодключитьВнешнююКомпоненту(Адрес, "ИнтеграционнаяКомпонента", ТипВнешнейКомпоненты.Native); 
		Драйвер = Новый("AddIn.ИнтеграционнаяКомпонента.INCOTEX_KKT_V2");
	Исключение
		Инфо = ИнформацияОбОшибке();
		Результат = мОшибкаЗагрузкиДрайвера;
		ОписаниеОшибки = "Невозможно подключить внешнюю компоненту.
		| Проверьте, что внешняя компонента корректно установлена и имеет ту же версию, 
		| что и требуемая обработкой обслуживания.";
	КонецПопытки;
		
	Если Результат = мНетОшибки Тогда
		Попытка
			мВерсияИзДрайвера = Драйвер.ПолучитьНомерВерсии();
		Исключение
			Попытка
				// Получаем описание драйвера.
					ОписаниеДрайвера = "";
					Драйвер.ПолучитьОписание(ОписаниеДрайвера);
					ОписаниеДрайвераПараметры = ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
					мВерсияИзДрайвера = ОписаниеДрайвераПараметры.ВерсияДрайвера;
			Исключение
				Сообщить("""" + Модель + """:" + Символы.ПС +
				"Внимание! Невозможно определить версию драйвера." + Символы.ПС +
				"Корректная работа драйвера не гарантируется", СтатусСообщения.Внимание);
			КонецПопытки;
		КонецПопытки;
		
		Объект = Новый Структура("Модель, Параметры, Драйвер, ОписаниеОшибки, ИДУстройства",
								  Модель, Параметры, Драйвер, ОписаниеОшибки, ИДУстройства);
								  
		мПараметрыУстройства = Параметры;
		мПараметрыУстройства.Вставить("Идентификатор", Объект.Модель);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции // СоздатьОбъектДрайвера()

// Функция возвращает набор событий драйвера и параметры их обработки для
// заданной модели торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект            - <*>
//                    - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - Таблица значений, содержащая информацию о внешних
//                      событиях, генерируемых драйвером.
//                      Таблица имеет следующие колонки:
//                       "ИмяСобытия" - <Строка> - Имя внешнего события.
//
Функция ПолучитьОписаниеСобытий(Объект) Экспорт
	
	Сообщить("--ПолучитьОписаниеСобытий--");
	Таблица = Новый ТаблицаЗначений();

	Таблица.Колонки.Добавить("ИмяСобытия");

	Возврат Таблица;

КонецФункции // ПолучитьОписаниеСобытий()

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	Перем КодВозврата;
	Результат = Истина;
	НовыйСтандарт = Ложь;
	Сообщить("ПодключитьУстройство (начало)");
	возврат ИСТИНА;
	
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ТипОборудованияИспользуемый= "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудованияИспользуемый = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудованияИспользуемый);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка обращения к драйверу.'"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = 3003;
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	// Получаем ревизию интерфейса драйвера.
	РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса();
	НовыйСтандарт = Истина;
	// Получаем описание драйвера.
	ОписаниеДрайвера = "";
	ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
		
	ОписаниеДрайвераПараметры = ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
	НаименованиеДрайвера      = ОписаниеДрайвераПараметры.НаименованиеДрайвера;
	ОписаниеДрайвера          = ОписаниеДрайвераПараметры.ОписаниеДрайвера;
	ТипОборудования           = ОписаниеДрайвераПараметры.ТипОборудования;
	ИнтеграционныйКомпонент   = ОписаниеДрайвераПараметры.ИнтеграционныйКомпонент;
	ОсновнойДрайверУстановлен = ОписаниеДрайвераПараметры.ОсновнойДрайверУстановлен;
	URLЗагрузкиДрайвера       = ОписаниеДрайвераПараметры.URLЗагрузкиДрайвера;
		
	ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
			
	Для Каждого Параметр Из Параметры Цикл
		Сообщить("Параметр.Ключ " + СокрЛП(Параметр.Ключ));
		Если Параметр.Ключ = "Порт" тогда
			рез = ОбъектДрайвера.УстановитьПараметр("ComDev", "USB");
			Сообщить("рез = " + СокрЛП(рез));
			рез = ОбъектДрайвера.УстановитьПараметр("Baud", 115200);
			Сообщить("рез = " + СокрЛП(рез));				
			рез = ОбъектДрайвера.УстановитьПараметр("Timeout", 1000);
			Сообщить("рез = " + СокрЛП(рез));
			рез = ОбъектДрайвера.УстановитьПараметр("Serial", "00091356");
			Сообщить("рез = " + СокрЛП(рез));			
			//ОбъектДрайвера.ПолучитьПараметр("ComDev");
		конецЕсли;		
		Если Параметр.Ключ = "Модель" тогда
			рез = ОбъектДрайвера.УстановитьПараметр("Model", "185F");
			Сообщить("рез = " + СокрЛП(рез));
		конецЕсли;	
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	пар = "";
	ОбъектДрайвера.ПолучитьПараметры(пар);
	Сообщить(пар);
		
	//Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
		//ЗапуститьПриложение("powershell -file d:\musor\opensession.ps1", "", ИСТИНА, КодВозврата);
		//Предупреждение("Идет подключение...",5);
		//сек = 5;
		//КонДата = ТекущаяДата() + сек;
		//Пока ТекущаяДата() < КонДата Цикл
		//	// ждемссс....
		
		//КонецЦикла;		
		Сообщить("------------ПараметрыПодключения.ИДУстройства = ПолучитьIdсессии();----------------");
		ПараметрыПодключения.ИДУстройства = "авваав";
		Сообщить("Ответ=" + СокрЛП(Ответ));
	//Исключение
	//	Результат = Ложь;
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить(999);
	//	ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
	//	Возврат Результат;
	//КонецПопытки;
	
	Сообщить("ПараметрыПодключения.ИДУстройства=" +СокрЛП(ПараметрыПодключения.ИДУстройства));
	
	ошибка = "";
	ОбъектДрайвера.ПолучитьОшибку(ошибка);
	Сообщить("ошибка=" + СокрЛП(ошибка));
	Ответ = ИСТИНА;
	
	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		//ошибка = "";
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		//Сообщить();
	Иначе		
		Если ТипОборудованияИспользуемый = "ПринтерЧеков" 
				Или ТипОборудованияИспользуемый = "ФискальныйРегистратор" 
				Или ТипОборудованияИспользуемый = "ККТ" Тогда
			//ВремВыходныеПараметры = Новый Массив();
			//Если ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремВыходныеПараметры) Тогда
			//	ВремШиринаСтроки = ВремВыходныеПараметры[0];
			//	ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
			//КонецЕсли;
			//ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПодключитьУстройство

функция ПреобразоватьПараметрыВПараметрыУстройства(Объект)
	парамСист = "";
	Сообщить("--------ПреобразоватьПараметрыВПараметрыУстройства----------");
	Возврат ИСТИНА;
	Сообщить("ПреобразоватьПараметрыВПараметрыУстройства");
	Объект.Драйвер.ПолучитьПараметры(парамСист);
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(парамСист);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Settings" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ЧтениеXML.Прочитать();
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Group" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ЧтениеXML.Прочитать() И (ЧтениеXML.Имя <> "Group" ИЛИ ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента) do
				//Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента тогда
				//	Сообщить("-----------");
				//	Сообщить(ЧтениеXML.ЗначениеАтрибута("Name"));
				//конецЕсли;
				//Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента тогда
				//	Сообщить("************");
				//конецЕсли;							
				//если ЧтениеXML.Имя = "Item" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента тогда
				//	Сообщить("ЧтениеXML.ЗначениеАтрибута(""Value"")" + СокрЛП(ЧтениеXML.ЗначениеАтрибута("Value")));
				//	//Сообщить("ЧтениеXML.ЗначениеАтрибута(""Value"")" + СокрЛП(ЧтениеXML.ЗначениеАтрибута("Value")));
				//конецЕсли;				
				если ЧтениеXML.Имя = "Parameter" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента тогда
					Объект.Параметры.Вставить(ЧтениеXML.ЗначениеАтрибута("Name"), ЧтениеXML.ЗначениеАтрибута("DefaultValue"));
					Сообщить(ЧтениеXML.ЗначениеАтрибута("Name") + "=" + СокрЛП(ЧтениеXML.ЗначениеАтрибута("DefaultValue")));
				конецЕсли;				
			конецЦикла;
		КонецЕсли;
	КонецЕсли;
	
конецФункции //ПреобразоватьПараметрыВПараметрыУстройства

// Функция осуществляет подключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция Подключить(Объект) Экспорт

	Результат = мНетОшибки;
	Сообщить("Подключить");

	//мПараметрыУстройства = Объект.Параметры;
	//ПреобразоватьПараметрыВПараметрыУстройства(Объект);
	//
	//мПараметрыУстройства.Вставить("Идентификатор", Объект.Модель);
	//
	//РезультатПодключения = ПодключитьУстройство(
	//	Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения, мВыходныеПараметры);
	//	
	//Если Не РезультатПодключения Тогда
	//	Результат = мОшибкаПриПодключении;
	//	Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	//КонецЕсли;

	Возврат Результат;

КонецФункции // Подключить()

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	Сообщить("ОтключитьУстройство");
	
	ВыходныеПараметры = Новый Массив();
	
	//ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	//ЗапуститьПриложение("powershell -file d:\musor\closesession.ps1");	
	
	Возврат Результат;
	
КонецФункции //ОтключитьУстройство

// Процедура осуществляет отключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект - <*>
//         - Объект драйвера торгового оборудования.
//
Процедура Отключить(Объект) Экспорт

	Сообщить("Отключить");
	ОтключитьУстройство(
		Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения, мВыходныеПараметры);

КонецПроцедуры // Отключить()

// Функция осуществляет проверку правильности настройки и подключения
// торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства, проверка
//                                   которого предполагается.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ТестУстройства(Объект) Экспорт
	Сообщить("Тест устройства (начало)...");		
	РезультатПеречисление = мНетОшибки;	
	командаДляККТ = "PrintReport";
	кассир = ПолучитьИмяКассира();
	списКоманды = Новый Структура;
	списКоманды.Встасить("operation", командаДляККТ);
	списПараметры = Новый Структура;
	списКоманды.Вставить("params", списКоманды);
	списПараметры.Встасить("reportCode", 1);       
	ОтветJSON = ""; ОпиасаниеОшибкиОтправкиЗапроса = "";
	резОтправки = ОтправитьКомандуНаККТ(списКоманды, ОтветJSON, ОпиасаниеОшибкиОтправкиЗапроса);
	ОписаниеОшибкиРазбораОтвтета = ""; ОтветСтруктура = "";
	резРазбораОтветаОтККТ = разобратьОтветОтККТ(резОтправки, ОпиасаниеОшибкиОтправкиЗапроса, командаДляККТ, ОтветJSON, ОтветСтруктура, РезультатПеречисление, ОписаниеОшибкиРазбораОтвтета);
	Если НЕ резРазбораОтветаОтККТ тогда
		ошибкаРазбораОтвета = "Ошибка: при разборе ответа (" + СокрЛП(ОписаниеОшибкиРазбораОтвтета) + ") от сервера";
		Сообщить(ошибкаРазбораОтвета, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаРазбораОтвета);
		РезультатПеречисление = мОшибкаНеизвестно;
		возврат РезультатПеречисление;
	конецЕсли;                                          
	если НЕ ОтветСтруктура.success тогда
		ошибкаОтправкаКомандыНаККТ = "Ошибка (" + СокрЛП(СокрЛП(ОтветСтруктура.message)) + "): при отправки команды (" + СокрЛП(командаДляККТ) + ") на ККТ";
		Сообщить(ошибкаОтправкаКомандыНаККТ, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаОтправкаКомандыНаККТ);
		Возврат РезультатПеречисление;
	конецЕсли;
	НомерЧека = ОтветСтруктура.fiscNumb;
	НомерСмены = ОтветСтруктура.shiftNum;		
	Возврат РезультатПеречисление;		
КонецФункции // ТестУстройства()

// Функция осуществляет проверку правильности настройки и подключения
// торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства, проверка
//                                   которого предполагается.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ТестУстройства2(Объект) Экспорт
	Результат = Подключить(Объект);
	Сообщить("-----Тест устройства22...--------");
	Возврат мНетОшибки;
	
	РезультатВыполнения = ВыполнитьКоманду("ТестУстройства",
		, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);

	Если Не РезультатВыполнения Тогда
		Результат = мОшибкаНеизвестно;
		Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	Иначе
		Результат = мНетОшибки;
		Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	КонецЕсли;
	
	Отключить(Объект);

	Возврат Результат;

КонецФункции // ТестУстройства2()

// Процедура осуществляет вызов формы настройки торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Модель    - <Строка>
//            - Модель настраиваемого оборудования.
//
//  Параметры - <Структура>
//            - Входной/выходной параметр; структура параметров.
//
Процедура НастроитьОборудование(Модель, Параметры) Экспорт

	Сообщить("НастроитьОборудование");
	Форма                    = ПолучитьФорму("ФормаНастройки");
	Форма.мМодель            = Модель;
	Форма.мПараметры         = Параметры;

	Ответ = Форма.ОткрытьМодально();

	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Параметры = Форма.мПараметры;
	КонецЕсли;
	
	//ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Вставить("ПараметрыОборудования", Параметры);
	//ПараметрыФормы.Вставить("Идентификатор", Модель);
	//
	//Результат = ОткрытьФормуМодально("ОбщаяФорма.ФормаНастройкиУниверсальныйДрайвер", ПараметрыФормы);
	//
	//Если Результат <> Неопределено Тогда
	//	Параметры = Результат.ПараметрыОборудования;
	//КонецЕсли;

КонецПроцедуры // НастроитьОборудование()

// Функция возвращает имя источника внешнего события 
// генерируемое при подключеннии внешней компонентой.
// По уникальному для сеанса подключения имени производится поиск 
// из конфигурации обработки обслуживания для обработки полученного
// события.
// (API v2.1)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства.
//
// Возвращаемое значение:
//  <Строка> - Имя внешнего источника события.
//
Функция ПолучитьИмяИсточникаВнешнегоСобытия(Объект) Экспорт

	Сообщить("ПолучитьИмяИсточникаВнешнегоСобытия");
	Возврат "";

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ФУНКЦИИ API ОБРАБОТОК ОБСЛУЖИВАНИЯ ККТ)

Функция ОткрытьСмену(Объект) Экспорт	
	РезультатПеречисление = мНетОшибки;	
	командаДляККТ = "OpenShift";
	Сообщить("Открыть смену (начало)");
	кассир = ПолучитьИмяКассира();
	списКоманды = Новый Структура;
	списКоманды.Встасить("operation", командаДляККТ);
	списПараметры = Новый Структура;
	списКоманды.Вставить("params", списКоманды);
	списПараметры.Встасить("cashier", кассир);       
	ОтветJSON = ""; ОпиасаниеОшибкиОтправкиЗапроса = "";
	резОтправки = ОтправитьКомандуНаККТ(списКоманды, ОтветJSON, ОпиасаниеОшибкиОтправкиЗапроса);
	ОписаниеОшибкиРазбораОтвтета = ""; ОтветСтруктура = "";
	резРазбораОтветаОтККТ = разобратьОтветОтККТ(резОтправки, ОпиасаниеОшибкиОтправкиЗапроса, командаДляККТ, ОтветJSON, ОтветСтруктура, РезультатПеречисление, ОписаниеОшибкиРазбораОтвтета);
	Если НЕ резРазбораОтветаОтККТ тогда
		ошибкаРазбораОтвета = "Ошибка: при разборе ответа (" + СокрЛП(ОписаниеОшибкиРазбораОтвтета) + ") от сервера";
		Сообщить(ошибкаРазбораОтвета, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаРазбораОтвета);
		РезультатПеречисление = мОшибкаНеизвестно;
		возврат РезультатПеречисление;
	конецЕсли;                                          
	если НЕ ОтветСтруктура.success тогда
		ошибкаОтправкаКомандыНаККТ = "Ошибка (" + СокрЛП(СокрЛП(ОтветСтруктура.message)) + "): при отправки команды (" + СокрЛП(командаДляККТ) + ") на ККТ";
		Сообщить(ошибкаОтправкаКомандыНаККТ, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаОтправкаКомандыНаККТ);
		Возврат РезультатПеречисление;
	конецЕсли;
	НомерЧека = ОтветСтруктура.fiscNumb;
	НомерСмены = ОтветСтруктура.shiftNum;		
	Возврат РезультатПеречисление;	
КонецФункции //ОткрытьСмену

Функция ЗакрытьСмену(Объект) Экспорт	
	РезультатПеречисление = мНетОшибки;	
	командаДляККТ = "CloseShift";
	Сообщить("ЗакрытьСмену (начало)");
	кассир = ПолучитьИмяКассира();
	списКоманды = Новый Структура;
	списКоманды.Встасить("operation", командаДляККТ);
	списПараметры = Новый Структура;
	списКоманды.Вставить("params", списКоманды);
	списПараметры.Встасить("cashier", кассир);       
	ОтветJSON = ""; ОпиасаниеОшибкиОтправкиЗапроса = "";
	резОтправки = ОтправитьКомандуНаККТ(списКоманды, ОтветJSON, ОпиасаниеОшибкиОтправкиЗапроса);
	ОписаниеОшибкиРазбораОтвтета = ""; ОтветСтруктура = "";
	резРазбораОтветаОтККТ = разобратьОтветОтККТ(резОтправки, ОпиасаниеОшибкиОтправкиЗапроса, командаДляККТ, ОтветJSON, ОтветСтруктура, РезультатПеречисление, ОписаниеОшибкиРазбораОтвтета);
	Если НЕ резРазбораОтветаОтККТ тогда
		ошибкаРазбораОтвета = "Ошибка: при разборе ответа (" + СокрЛП(ОписаниеОшибкиРазбораОтвтета) + ") от сервера";
		Сообщить(ошибкаРазбораОтвета, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаРазбораОтвета);
		РезультатПеречисление = мОшибкаНеизвестно;
		возврат РезультатПеречисление;
	конецЕсли;                                          
	если НЕ ОтветСтруктура.success тогда
		ошибкаОтправкаКомандыНаККТ = "Ошибка (" + СокрЛП(СокрЛП(ОтветСтруктура.message)) + "): при отправки команды (" + СокрЛП(командаДляККТ) + ") на ККТ";
		Сообщить(ошибкаОтправкаКомандыНаККТ, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаОтправкаКомандыНаККТ);
		Возврат РезультатПеречисление;
	конецЕсли;
	НомерЧека = ОтветСтруктура.fiscNumb;
	НомерСмены = ОтветСтруктура.shiftNum;		
	Возврат РезультатПеречисление;	
КонецФункции //ЗакрытьСмену

Функция ПолучитьПараметрыККТ(Объект) Экспорт
	Результат  = мНетОшибки;
	Сообщить("ПолучитьПараметрыККТ");	
	//РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ПолучитьПараметрыККТ",
	//	, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);
	//
	//Если Не РезультатВыполнения Тогда
	//	Результат = мОшибкаНеизвестно;
	//	Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	//Иначе
	//	Результат = мНетОшибки;
	//	Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	//КонецЕсли;
	//
	Возврат Результат;
КонецФункции //ПолучитьПараметрыККТ

Функция ФискализироватьЧек(Объект, ПараметрыЧека) Экспорт
	Результат  = мНетОшибки;
	Сообщить("ФискализироватьЧек");
	//ПолучитьПараметрыККТ(Объект);
	//
	//мПараметрыПодключения.Вставить("ПараметрыРегистрации", Объект.ВыходныеПараметры);
	//
	//мВходныеПараметры.Очистить();
	//мВходныеПараметры.Добавить(ПараметрыЧека);

	//РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ФискализацияЧека",
	//	мВходныеПараметры, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);

	//Если Не РезультатВыполнения Тогда
	//	Результат = мОшибкаНеизвестно;
	//	Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	//Иначе
	//	Результат = мНетОшибки;
	//	Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	//КонецЕсли;
	//
	//Возврат Результат;
    Возврат Результат;
КонецФункции

Функция НапечататьЧекКоррекции(Объект, ПараметрыЧека) Экспорт
	
	//ПолучитьПараметрыККТ(Объект);
	//
	//мПараметрыПодключения.Вставить("ПараметрыРегистрации", Объект.ВыходныеПараметры);
	//
	//мВходныеПараметры.Очистить();
	//мВходныеПараметры.Добавить(ПараметрыЧека);

	//РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ПечатьЧекаКоррекции",
	//	мВходныеПараметры, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);

	//Если Не РезультатВыполнения Тогда
	//	Результат = мОшибкаНеизвестно;
	//	Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	//Иначе
	//	Результат = мНетОшибки;
	//	Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	//КонецЕсли;
	//
	//Возврат Результат;

КонецФункции

Функция Сумма(Объект, Пароль, Сумма, ПараметрыККТ) Экспорт
	
	Результат = мНетОшибки;
	Сообщить("Функция Сумма");
	//мВходныеПараметрыСтруктура.Вставить("ТипИнкассации", ?(Сумма > 0, 1, 0));
	//мВходныеПараметрыСтруктура.Вставить("Сумма", ?(Сумма > 0, Сумма, - Сумма));
	//мПараметрыПодключения.Вставить("ПараметрыРегистрации", ПараметрыККТ);
	//РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("Инкассация",
	//	мВходныеПараметрыСтруктура, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);

	//Если Не РезультатВыполнения Тогда
	//	Результат = мОшибкаНеизвестно;
	//	Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	//Иначе
	//	Результат = мНетОшибки;
	//	Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	//КонецЕсли;
	//
	Возврат Результат;

КонецФункции

Функция ПолучитьТекущееСостояние(Объект) Экспорт
	Результат  = мНетОшибки;
	Сообщить("ПолучитьТекущееСостояние");	
	//РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ПолучитьТекущееСостояние",
	//	, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);
	//
	//Если Не РезультатВыполнения Тогда
	//	Результат = мОшибкаНеизвестно;
	//	Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	//Иначе
	//	Результат = мНетОшибки;
	//	Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	//КонецЕсли;
	//
	Возврат Результат;
КонецФункции //ПолучитьТекущееСостояние

Функция ОтчетОСостоянииРасчетов(Объект) Экспорт	
	Сообщить("ОтчетОСостоянииРасчетов (начало)");	
	РезультатПеречисление = мНетОшибки;	
	командаДляККТ = "PrintReport";
	кассир = ПолучитьИмяКассира();
	списКоманды = Новый Структура;
	списКоманды.Встасить("operation", командаДляККТ);
	списПараметры = Новый Структура;
	списКоманды.Вставить("params", списКоманды);
	списПараметры.Встасить("reportCode", 5);       
	ОтветJSON = ""; ОпиасаниеОшибкиОтправкиЗапроса = "";
	резОтправки = ОтправитьКомандуНаККТ(списКоманды, ОтветJSON, ОпиасаниеОшибкиОтправкиЗапроса);
	ОписаниеОшибкиРазбораОтвтета = ""; ОтветСтруктура = "";
	резРазбораОтветаОтККТ = разобратьОтветОтККТ(резОтправки, ОпиасаниеОшибкиОтправкиЗапроса, командаДляККТ, ОтветJSON, ОтветСтруктура, РезультатПеречисление, ОписаниеОшибкиРазбораОтвтета);
	Если НЕ резРазбораОтветаОтККТ тогда
		ошибкаРазбораОтвета = "Ошибка: при разборе ответа (" + СокрЛП(ОписаниеОшибкиРазбораОтвтета) + ") от сервера";
		Сообщить(ошибкаРазбораОтвета, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаРазбораОтвета);
		РезультатПеречисление = мОшибкаНеизвестно;
		возврат РезультатПеречисление;
	конецЕсли;                                          
	если НЕ ОтветСтруктура.success тогда
		ошибкаОтправкаКомандыНаККТ = "Ошибка (" + СокрЛП(СокрЛП(ОтветСтруктура.message)) + "): при отправки команды (" + СокрЛП(командаДляККТ) + ") на ККТ";
		Сообщить(ошибкаОтправкаКомандыНаККТ, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаОтправкаКомандыНаККТ);
		Возврат РезультатПеречисление;
	конецЕсли;
	НомерЧека = ОтветСтруктура.fiscNumb;
	НомерСмены = ОтветСтруктура.shiftNum;		
	Возврат РезультатПеречисление;		
КонецФункции //ОтчетОСостоянииРасчетов

// Функция возвращает Истину, если поддерживается смешанный режим печати
//  чека (одновременно фискальные и нефискальные строки).
// (API v2.4)
//
// Параметры:
//
// Возвращаемое значение:
//  <Булево> 
//
Функция ПоддерживаетсяСмешанныйРежимПечати() Экспорт

	Возврат Истина;

КонецФункции // ПоддерживаетсяСмешанныйРежимПечати()

Функция ОткрытьДенежныйЯщик(Объект) Экспорт
	Результат  = мНетОшибки;
	//РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ОткрытьДенежныйЯщик",
	//	, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);
	//
	//Если Не РезультатВыполнения Тогда
	//	Результат = мОшибкаНеизвестно;
	//	Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	//Иначе
	//	Результат = мНетОшибки;
	//	Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	//КонецЕсли;
	//
	Возврат Результат;

КонецФункции //ОткрытьДенежныйЯщик

Функция ВерсииСовместимы(СовместимыеВерсии) Экспорт

	Результат = Истина;

	//Если мВерсияИзДрайвера <> Неопределено Тогда
	//	Если СовместимыеВерсии.Количество() = 0 Тогда
	//		Результат = Ложь;
	//	Иначе
	//		Для Каждого СтрокаТаблицы Из СовместимыеВерсии Цикл
	//			Результат = Истина;
	//			Для Индекс = 1 По ?(СтрДлина(мВерсияИзДрайвера) < СтрДлина(СтрокаТаблицы.СовместимаяВерсия), СтрДлина(мВерсияИзДрайвера), СтрДлина(СтрокаТаблицы.СовместимаяВерсия)) Цикл
	//				Если Сред(мВерсияИзДрайвера,Индекс, 1) <> Сред(СтрокаТаблицы.СовместимаяВерсия, Индекс, 1) Тогда
	//					Результат = Ложь;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;

	//			Если Результат Тогда
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//Иначе
	//	Если СовместимыеВерсии.Найти("Не определена", "СовместимаяВерсия") <> Неопределено Тогда
	//		Результат = Истина;
	//	Иначе
	//		Результат = Ложь;
	//	КонецЕсли;
	//КонецЕсли;

	Возврат Результат;

КонецФункции //ВерсииСовместимы

Функция ВерсииРавны() Экспорт

	Результат = Истина;
	
	Возврат Результат;
	Если мВерсияИзДрайвера <> Неопределено Тогда
		Для Индекс = 1 По ?(СтрДлина(мВерсияИзДрайвера) < СтрДлина(мВерсияТребуемая), СтрДлина(мВерсияИзДрайвера), СтрДлина(мВерсияТребуемая)) Цикл
			Если Сред(мВерсияИзДрайвера,Индекс, 1) <> Сред(мВерсияТребуемая, Индекс, 1) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НапечататьСтроки(Объект, МассивСтрок, Ширина = 0) Экспорт

	Результат  = мНетОшибки;
	Сообщить("НапечататьСтроки");
	//СтрокаДляПечати = "";
	//Для Каждого СтрокаТекста Из МассивСтрок Цикл
	//	СтрокаДляПечати = СтрокаДляПечати + СтрокаТекста + Символы.ПС;
	//КонецЦикла;
	//
	//мВходныеПараметры.Очистить();
	//мВходныеПараметры.Добавить(СтрокаДляПечати);

	//РезультатВыполнения = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ВыполнитьКоманду("ПечатьТекста",
	//	мВходныеПараметры, мВыходныеПараметры, Объект.Драйвер, мПараметрыУстройства, мПараметрыПодключения);
	//	
	//Если Не РезультатВыполнения Тогда
	//	Результат = мОшибкаНеизвестно;
	//	Объект.ОписаниеОшибки = мВыходныеПараметры[1];
	//Иначе
	//	Результат = мНетОшибки;
	//	Объект.Вставить("ВыходныеПараметры", мВыходныеПараметры);
	//КонецЕсли;

	Возврат Результат;

КонецФункции //НапечататьСтроки

Функция ПечататьСтроку(Объект, Наименование, Количество, Цена, Скидка, Отдел, НДС, ЦенаСоСкидкой = 0, Марка = "") Экспорт                     
	Сообщить("Регистрация позиции (начало)");
	РезультатПеречисление = мНетОшибки;	
	командаДляККТ = "Registration";

	списКоманды = Новый Структура;
	списКоманды.Встасить("operation", командаДляККТ);
	списПараметры = Новый Структура;
	списКоманды.Вставить("params", списКоманды);
	списПараметры.Встасить("name", Наименование);       
	списПараметры.Встасить("quantity", Формат(Количество*10000, "ЧДЦ=0; ЧГ=0; ЧН=0"));
	списПараметры.Встасить("price", Формат(ЦенаСоСкидкой*100, "ЧДЦ=0; ЧГ=0; ЧН=0"));
	Если Марка <> "" тогда
		списПараметры.Встасить("mark", Марка);
	конецЕсли;
	ОтветJSON = ""; ОпиасаниеОшибкиОтправкиЗапроса = "";
	резОтправки = ОтправитьКомандуНаККТ(списКоманды, ОтветJSON, ОпиасаниеОшибкиОтправкиЗапроса);
	ОписаниеОшибкиРазбораОтвтета = ""; ОтветСтруктура = "";
	резРазбораОтветаОтККТ = разобратьОтветОтККТ(резОтправки, ОпиасаниеОшибкиОтправкиЗапроса, командаДляККТ, ОтветJSON, ОтветСтруктура, РезультатПеречисление, ОписаниеОшибкиРазбораОтвтета);
	Если НЕ резРазбораОтветаОтККТ тогда
		ошибкаРазбораОтвета = "Ошибка: при разборе ответа (" + СокрЛП(ОписаниеОшибкиРазбораОтвтета) + ") от сервера";
		Сообщить(ошибкаРазбораОтвета, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаРазбораОтвета);
		РезультатПеречисление = мОшибкаНеизвестно;
		возврат РезультатПеречисление;
	конецЕсли;                                          
	если НЕ ОтветСтруктура.success тогда
		ошибкаОтправкаКомандыНаККТ = "Ошибка (" + СокрЛП(СокрЛП(ОтветСтруктура.message)) + "): при отправки команды (" + СокрЛП(командаДляККТ) + ") на ККТ";
		Сообщить(ошибкаОтправкаКомандыНаККТ, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаОтправкаКомандыНаККТ);
		Возврат РезультатПеречисление;
	конецЕсли;
	Возврат РезультатПеречисление;	
КонецФункции // ПечататьСтроку()

Функция ОткрытьЧек(Объект, Пароль, ЭтоВозврат, НомерЧека, НомерСмены, ФискальныйЧек = Истина) Экспорт
	РезультатПеречисление = мНетОшибки;	
	командаДляККТ = "OpenCheck";
	Сообщить("Открыть чек");
	кассир = ПолучитьИмяКассира();
	списКоманды = Новый Структура;
	списКоманды.Встасить("operation", командаДляККТ);
	списПараметры = Новый Структура;
	списКоманды.Вставить("params", списКоманды);
	списПараметры.Встасить("cashier", кассир);       
	списПараметры.Встасить("isReturn", ЭтоВозврат);       
	ОтветJSON = ""; ОпиасаниеОшибкиОтправкиЗапроса = "";
	резОтправки = ОтправитьКомандуНаККТ(списКоманды, ОтветJSON, ОпиасаниеОшибкиОтправкиЗапроса);
	ОписаниеОшибкиРазбораОтвтета = ""; ОтветСтруктура = "";
	резРазбораОтветаОтККТ = разобратьОтветОтККТ(резОтправки, ОпиасаниеОшибкиОтправкиЗапроса, командаДляККТ, ОтветJSON, ОтветСтруктура, РезультатПеречисление, ОписаниеОшибкиРазбораОтвтета);
	Если НЕ резРазбораОтветаОтККТ тогда
		ошибкаРазбораОтвета = "Ошибка: при разборе ответа (" + СокрЛП(ОписаниеОшибкиРазбораОтвтета) + ") от сервера";
		Сообщить(ошибкаРазбораОтвета, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаРазбораОтвета);
		РезультатПеречисление = мОшибкаНеизвестно;
		возврат РезультатПеречисление;
	конецЕсли;                                          
	если НЕ ОтветСтруктура.success тогда
		ошибкаОтправкаКомандыНаККТ = "Ошибка (" + СокрЛП(СокрЛП(ОтветСтруктура.message)) + "): при отправки команды (" + СокрЛП(командаДляККТ) + ") на ККТ";
		Сообщить(ошибкаОтправкаКомандыНаККТ, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаОтправкаКомандыНаККТ);
		Возврат РезультатПеречисление;
	конецЕсли;
	НомерЧека = ОтветСтруктура.fiscNumb;
	НомерСмены = ОтветСтруктура.shiftNum;		
	Возврат РезультатПеречисление;
КонецФункции // ОткрытьЧек()

Функция ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал,НомерЧека) Экспорт
 	РезультатПеречисление = мНетОшибки;
 	Сообщить("Закрыть чек (начало)"); 
	
 	командаДляККТ = "CloseCheck";
	списКоманды = Новый Структура;
	списКоманды.Встасить("operation", командаДляККТ);
	списПараметры = Новый Структура;
	списКоманды.Вставить("params", списКоманды);
	списПараметры.Встасить("cash", СуммаНал);       
	списПараметры.Встасить("ecash", СуммаБезнал);       
	ОтветJSON = ""; ОпиасаниеОшибкиОтправкиЗапроса = "";
	резОтправки = ОтправитьКомандуНаККТ(списКоманды, ОтветJSON, ОпиасаниеОшибкиОтправкиЗапроса);
	ОписаниеОшибкиРазбораОтвтета = ""; ОтветСтруктура = "";
	резРазбораОтветаОтККТ = разобратьОтветОтККТ(резОтправки, ОпиасаниеОшибкиОтправкиЗапроса, командаДляККТ, ОтветJSON, ОтветСтруктура, РезультатПеречисление, ОписаниеОшибкиРазбораОтвтета);
	Если НЕ резРазбораОтветаОтККТ тогда
		ошибкаРазбораОтвета = "Ошибка: при разборе ответа (" + СокрЛП(ОписаниеОшибкиРазбораОтвтета) + ") от сервера";
		Сообщить(ошибкаРазбораОтвета, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаРазбораОтвета);
		РезультатПеречисление = мОшибкаНеизвестно;
		возврат РезультатПеречисление;
	конецЕсли;                                          
	если НЕ ОтветСтруктура.success тогда
		ошибкаОтправкаКомандыНаККТ = "Ошибка (" + СокрЛП(СокрЛП(ОтветСтруктура.message)) + "): при отправки команды (" + СокрЛП(командаДляККТ) + ") на ККТ";
		Сообщить(ошибкаОтправкаКомандыНаККТ, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаОтправкаКомандыНаККТ);
		Возврат РезультатПеречисление;
	конецЕсли;
	НомерЧека = ОтветСтруктура.fiscNumb;
	Возврат РезультатПеречисление;
КонецФункции // ЗакрытьЧек()

процедура СформироватьПримерТовароы(ТаблСтркутры, ЭтоЧекВозврата)
 Перем Стр, Команда, СтрДоб;
 Стр = ""; Команда = "";

 ТекстТовыйЧек = Новый ЧтениеТекста;
 ТекстТовыйЧек.Открыть(гПутьКФайуЧека + гИмяФайлаЧека);

 Пока Стр <> Неопределено цикл
  Стр = ТекстТовыйЧек.ПрочитатьСтроку();
  Если СокрЛП(Стр) = "" тогда
   Продолжить;
  конецЕсли;
  Если Лев(Стр, 1) = "#" тогда
   Команда = СокрЛП(Прав(СокрЛП(Стр), СтрДлина(СокрЛП(Стр)) - 1));
  	Если Команда = "Строка" тогда
	   СтрДоб = ТаблСтркутры.Добавить();
 	 конецЕсли;
   Продолжить;
  конецЕсли;
  ПарамКоманды = СокрЛП(Стр);
  Если Команда = "ТипЧека" тогда
   Если ПарамКоманды = "Продажа" тогда
   	ЭтоЧекВозврата = ЛОЖЬ;
   иначе
    ЭтоЧекВозврата = ИСТИНА;
   конецЕсли;
  конецЕсли;
  Если Команда = "Строка" тогда
   СтрДоб = ТаблСтркутры.Добавить();
  конецЕсли;
  Если Команда = "Наименование" тогда
   СтрДоб.ТовНаим = СокрЛП(Стр);
  конецЕсли;
  Если Команда = "Количество" тогда
   СтрДоб.Количество = Число(СокрЛП(Стр));
  конецЕсли;
  Если Команда = "Цена" тогда
   СтрДоб.Цена = Число(СокрЛП(Стр));
  конецЕсли;
  Если Команда = "Сумма" тогда
   СтрДоб.Сумма = Число(СокрЛП(Стр));
  конецЕсли;
  Если Команда = "Скидка" тогда
   //СтрДоб.Сумма = Число(СокрЛП(Стр));
  конецЕсли;
  Если Команда = "НДС" тогда
   СтрДоб.НДС = Число(СокрЛП(Стр));
  конецЕсли;
  Если Команда = "Марка" тогда
   СтрДоб.Марка = СокрЛП(Стр);
  конецЕсли;
 конецЦикла;
 ТекстТовыйЧек.Закрыть();	  
	//СтрДоб = ТаблСтркутры.Добавить();
	//СтрДоб.ТовНаим = "ававава";
	//СтрДоб.Цена    = 12;
	//СтрДоб.Количество = 1;
	//СтрДоб.Сумма   = 12;
	//СтрДоб.НДС     = 0;
конецПроцедуры //СформироватьПримерТовароы

Функция ОтменитьЧек(Объект) Экспорт

	Результат  = мНетОшибки;
	Сообщить("ОтменитьЧек");
	// Не используется, оставлена для совместимости

	Возврат Результат;

КонецФункции

Функция АннулироватьЧек(Объект) Экспорт

	Результат  = мНетОшибки;
    Сообщить("АннулироватьЧек");
	// Не используется, оставлена для совместимости

	Возврат Результат;

КонецФункции // АннулироватьЧек()

Функция ПолучитьXMLПакетДляОперации(ОбщиеПараметры, РевизияИнтерфейса = 0) Экспорт
	
	Сообщить("------ПолучитьXMLПакетДляОперации--------");
	Сообщить("ПолучитьXMLПакетДляОперации");
	ЗаписьXML = Новый ЗаписьXML();                        
	Возврат ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InputParameters");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	//Если РевизияИнтерфейса >= 3000 Тогда  // Версия стандарта 3.0 (ОФД 1.1)
		//ЗаписьXML.ЗаписатьАтрибут("CashierName", ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор'")));
		//ЗаписьXML.ЗаписатьАтрибут("CashierINN" , ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
		//Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
		//	ЗаписьXML.ЗаписатьАтрибут("SaleAddress", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		//КонецЕсли;
		//Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
		//	ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		//КонецЕсли;
		
		ЗаписьXML.ЗаписатьАтрибут("CashierName", "Кассир");
		ЗаписьXML.ЗаписатьАтрибут("CashierINN" , "");
		//Если ОбщиеПараметры.Свойство("АдресРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресРасчетов) Тогда   
		//	ЗаписьXML.ЗаписатьАтрибут("SaleAddress", XMLСтрока(ОбщиеПараметры.АдресРасчетов));
		//КонецЕсли;
		//Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда  
		//	ЗаписьXML.ЗаписатьАтрибут("SaleLocation", XMLСтрока(ОбщиеПараметры.МестоРасчетов));
		//КонецЕсли;
		
	//Иначе
	//	ЗаписьXML.ЗаписатьАтрибут("CashierName" , ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор'")));
	//	ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
	//КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции //ПолучитьXMLПакетДляОперации  

// Функция осуществляет формирование отчет без гашения.
//
Функция ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	Перем КодВозврата;
	
	Сообщить("-----ОтчетБезГашения (начало) ----");
	
	Результат = Истина;
	Возврат Результат;
	НомерСмены     = 0;
	НомерДокумента = 0;
	
	//Сообщить("ПараметрыПодключения.ТипОборудования=" + СокрЛП(ПараметрыПодключения.ТипОборудования));
	//Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
	//	
		Попытка
			//Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
				ПараметрыОперации = ПолучитьXMLПакетДляОперации(ВходныеПараметры);
				//Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ПараметрыОперации);
				Сообщить("Запуск скрипта 4...");
				ЗапуститьПриложение("powershell -file d:\musor\test3.ps1 XReport", "", ИСТИНА, КодВозврата);
				//Предупреждение("Идет подключение...",5);
				//сек = 5;
				//КонДата = ТекущаяДата() + сек;
				//Пока ТекущаяДата() < КонДата Цикл
				//	// ждемссс....
				//КонецЦикла;						
			//Иначе
			//	Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
			//КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		
	//ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
	//	
	//	Попытка
	//		Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
	//	Исключение
	//		Результат = Ложь;
	//		ВыходныеПараметры.Очистить();
	//		ВыходныеПараметры.Добавить(999);
	//		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
	//		Возврат Результат;
	//	КонецПопытки;		
	//КонецЕсли;
		
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции //ОтчетБезГашения

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
						 
	Сообщить("----ВыплнитьКманду" + СокрЛП(Команда) + "--------");
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	//ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
	//	ИмяДействия = ВходныеПараметры[0];
	//	Результат = ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	//// Получение версии драйвера
	//ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
	//	Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера);
		
	// Получение описание драйвера.
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С УСТРОЙСТВАМИ ВВОДА ДАННЫХ
			
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙСТВАМИ 
	
	//// Открытие денежного ящика
	//ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
	//	Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера);
	//			
	//// Открыть смену
	//ИначеЕсли Команда = "OpenShift" ИЛИ Команда = "ОткрытьСмену" Тогда
	//	Результат = ОткрытьСмену(ОбъектДрайвера);
	//	
	//// Закрыть кассовую смену
	//ИначеЕсли Команда = "CloseShift" ИЛИ Команда = "ЗакрытьСмену" Тогда
	//	Результат = ЗакрытьСмену(ОбъектДрайвера);
	//	
	//// Отчет о текущем состоянии расчетов
	//ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" ИЛИ Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
	//	Результат = ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сформировать отчет без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	//// Печать чека внесения/выемки.
	//ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
	//	Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	//	
	//// Фискализация чека.
	//ИначеЕсли Команда = "CheckFiscalization" ИЛИ Команда = "ФискализацияЧека" Тогда
	//	Результат = ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	//					
	//// Печать слип чека
	//ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
	//	СтрокаТекста = ВходныеПараметры[0];
	//	Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
	//	
	//// Печать слип чека
	//ИначеЕсли Команда = "PrintTextDocument" ИЛИ Команда = "ПечатьТекстовогоДокумента"  Тогда
	//	Результат = НачатьПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	//	
	//// Получить текущее состояние 
	//ИначеЕсли Команда = "GetCurrentStatus" ИЛИ Команда = "ПолучитьТекущееСостояние" Тогда
	//	Результат = ПолучитьТекущееСостояние(ОбъектДрайвера);
	//	
	//// Получить параметры ККТ
	//ИначеЕсли Команда = "GetDataKKT" ИЛИ Команда = "ПолучитьПараметрыККТ" Тогда
	//	Результат = ПолучитьПараметрыККТ(ОбъектДрайвера);
	//	
	//// Отчет о текущем состоянии расчетов
	//ИначеЕсли Команда = "OperationFN" ИЛИ Команда = "ОперацияФН" Тогда
	//	Результат = ОперацияФискальногоНакопителя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВходныеПараметры, ВыходныеПараметры);

	//// Открыть чек
	//ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
	//	ЧекВозврата   = ВходныеПараметры[0];
	//	ФискальныйЧек = ВходныеПараметры[1];
	//	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
	//	
	//// Отменить открытый чек
	//ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
	//	Результат = ОтменитьЧек(ОбъектДрайвера);
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции //ВыполнитьКоманду

Функция XОтчет(Объект, Пароль, НомерЧека, НомерСмены) Экспорт
	Сообщить("--------- XОтчет (начало)---------");
	Возврат ИСТИНА;
КонецФункции //XОтчет

Функция ZОтчет(Объект, Пароль, НомерЧека, НомерСмены) Экспорт
	Сообщить("--------- ZОтчет (начало)---------");
	Возврат ИСТИНА;	
КонецФункции //ZОтчет

Функция ПолучитьПараметрыНаличнойОплаты(Объект, НомерОтдела) Экспорт
	Результат = мНетОшибки;
	Сообщить("ПолучитьПараметрыНаличнойОплаты");
	Возврат Результат;
КонецФункции

функция ОтправитьКомандуНаККТ(списКоманды, ОтветJSON, ОпиасаниеОшибкиОтправкиЗапроса)
	
	резОтправкиКоманды = ИСТИНА;
	JSONДокумент = СформироватьJSONИзСтруктуры(списКоманды);	
	Попытка		
        HTTP = Новый HTTPСоединение("localhost", 2579,,,, 20); // 20 секунд таймаут        
        // Формируем заголовки
        Заголовки = Новый Соответствие;
        Заголовки.Вставить("Content-Type", "application/json");
        
        // Отправляем POST-запрос  
		HTTPЗапрос = Новый HTTPЗапрос("/document", Заголовки);
		Сообщить(JSONДокумент);
		HTTPЗапрос.УстановитьТелоИзСтроки(JSONДокумент);
        Ответ = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
        
        // Читаем ответ
        ОтветJSON = Ответ.ПолучитьТелоКакСтроку();
	Исключение                
		резОтправкиКоманды = ЛОЖЬ;
        Сообщить("Ошибка при выполнении запроса: " + ОписаниеОшибки());
        Возврат Ложь;
    КонецПопытки;		
        	
	возврат резОтправкиКоманды;
конецФункции //ОтправитьКомандуНаККТ

// Вспомогательная функция для форматирования значения в JSON
Функция ПреобразоватьЗначениеВJSON(Значение)
    Если ТипЗнч(Значение) = Тип("Строка") Тогда
        Возврат """" + СтрЗаменить(Значение, """", "\""") + """";
    ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
        Возврат Формат(Значение, "ЧДЦ=0; ЧГ=0; ЧН=0");
    ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
        Возврат ?(Значение, "true", "false");
    ИначеЕсли Значение = Неопределено Тогда
        Возврат "null";
    КонецЕсли;
    
    Возврат """" + Строка(Значение) + """";
КонецФункции

Функция СформироватьJSONИзСтруктуры(Документ) Экспорт
    ПервоеПоле = Истина; 
	JSONСтрока = "{";
    Для Каждого КлючИЗначение Из Документ Цикл
        Если НЕ ПервоеПоле Тогда
            JSONСтрока = JSONСтрока + ",";
        КонецЕсли;

        Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
            JSONСтрока = JSONСтрока + """" + КлючИЗначение.Ключ + """: [";
            
            ПервыйЭлемент = Истина;
            Для Каждого Элемент Из КлючИЗначение.Значение Цикл
                Если НЕ ПервыйЭлемент Тогда
                    JSONСтрока = JSONСтрока + ",";
                КонецЕсли;
                
                Если ТипЗнч(Элемент) = Тип("Структура") Тогда
                    JSONСтрока = JSONСтрока + СформироватьJSONИзСтруктуры(Элемент);
                Иначе
                    JSONСтрока = JSONСтрока + ПреобразоватьЗначениеВJSON(Элемент);
                КонецЕсли;
                
                ПервыйЭлемент = Ложь;
            КонецЦикла;
            
            JSONСтрока = JSONСтрока + "]";
        ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
            JSONСтрока = JSONСтрока + """" + КлючИЗначение.Ключ + """: ";
            JSONСтрока = JSONСтрока + СформироватьJSONИзСтруктуры(КлючИЗначение.Значение);
		иначе
            JSONСтрока = JSONСтрока + """" + КлючИЗначение.Ключ + """: ";
            JSONСтрока = JSONСтрока + ПреобразоватьЗначениеВJSON(КлючИЗначение.Значение);
        КонецЕсли;
        
        ПервоеПоле = Ложь;        
	КонецЦикла;
	
	JSONСтрока = JSONСтрока + "}";

    Возврат JSONСтрока;
КонецФункции //СформироватьJSONИзСтруктуры

функция разобратьОтветОтККТ(резОтправки, ОпиасаниеОшибкиОтправкиЗапроса, командаДляККТ, ОтветJSON, ответСтруктура, РезультатПеречисление, ОтветОшибка)	
	Если НЕ резОтправки тогда                                    
		РезультатПеречисление = мОшибкаНеизвестно;
		ошибкаОтправкиКомандыККТ = "Ошибка (" + СокрЛП(ОпиасаниеОшибкиОтправкиЗапроса) + 
					": при отправке команды """ + СокрЛП(командаДляККТ) + """ для ККТ " + СокрЛП(ОтветJSON);
		Сообщить(ошибкаОтправкиКомандыККТ);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаОтправкиКомандыККТ);
		Возврат ИСТИНА;
	конецЕсли;                               
	резРазбораОтветаОтККТ = РазобратьОтветJSON(ОтветJSON, ответСтруктура);
	Если НЕ резРазбораОтветаОтККТ тогда
		ошибкаРазбораОтвета = "Ошибка: при разборе ответа (""" + СокрЛП(ОтветJSON) + """ от сервера";
		Сообщить(ошибкаРазбораОтвета, СтатусСообщения.Важное);
		ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаРазбораОтвета);
		РезультатПеречисление = мОшибкаНеизвестно;
		возврат ЛОЖЬ;
	конецЕсли;                                          
	если НЕ ответСтруктура.success тогда
		резульатПреобразованияОшибкиВПеречисление = разоборатьСообщениеОбОшибке(ответСтруктура.message, РезультатПеречисление);
		Если НЕ резульатПреобразованияОшибкиВПеречисление тогда
			ошибкаПреобразовнтяОвтетаОбОшибки = "Ошибка: при преобразовании ответа об ошибке (""" + СокрЛП(ответСтруктура.message) + """ в перечисление";
			Сообщить(ошибкаПреобразовнтяОвтетаОбОшибки, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , ошибкаПреобразовнтяОвтетаОбОшибки);
			Результат = мОшибкаНеизвестно;		
			Возврат ЛОЖЬ;
		конецЕсли;	     
		Возврат ИСТИНА;
	конецЕсли;
	Возврат ИСТИНА;
конецФункции //разобратьОтветОтККТ


функция разобратьОтветJSON(ТекстJSON, ответСтруктура)
	резРазбора = ИСТИНА;
    ответСтруктура = Новый Структура;
    ответСтруктура.Вставить("status", "");
    ответСтруктура.Вставить("message", "");
    ответСтруктура.Вставить("fiscNumb", "");
    ответСтруктура.Вставить("fiscSign", "");
    
    // Простой парсер JSON (для базового ответа)
    ТекстJSON = СтрЗаменить(ТекстJSON, Символы.ПС, "");
    ТекстJSON = СтрЗаменить(ТекстJSON, Символы.ВК, "");
    ТекстJSON = СтрЗаменить(ТекстJSON, " ", "");
    ТекстJSON = Сред(ТекстJSON, 2, СтрДлина(ТекстJSON)-2); // Убираем { }
    
    // Ручной разбор строки на массив
    МассивПар = Новый Массив;
    ТекущаяСтрока = "";
    Для Индекс = 1 По СтрДлина(ТекстJSON) Цикл
        Символ = Сред(ТекстJSON, Индекс, 1);
        Если Символ = "," Тогда
            Если НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
                МассивПар.Добавить(ТекущаяСтрока);
                ТекущаяСтрока = "";
            КонецЕсли;
        Иначе
            ТекущаяСтрока = ТекущаяСтрока + Символ;
        КонецЕсли;
    КонецЦикла;
    
    // Добавляем последнюю пару
    Если НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
        МассивПар.Добавить(ТекущаяСтрока);
    КонецЕсли;
    
    // Разбор пар ключ-значение
    Для Каждого Пара Из МассивПар Цикл
        ПозицияДвоеточия = СтрНайти(Пара, ":");
        Если ПозицияДвоеточия > 0 Тогда
            Ключ = СтрЗаменить(Лев(Пара, ПозицияДвоеточия-1), """", "");
            Значение = СтрЗаменить(Сред(Пара, ПозицияДвоеточия+1), """", "");
            ответСтруктура.Вставить(Ключ, Значение);
        КонецЕсли;
    КонецЦикла;  
    Возврат резРазбора;	
конецФункции //РазобратьОтветJSON

функция разоборатьСообщениеОбОшибке(message, перечислениеРезультат)
	перечислениеРезультат = мОшибкаНеизвестно;
	Сообщить("Ошибка: " + СокрЛП(message));
	ЗаписьЖурналаРегистрации("Работа с ККТ", УровеньЖурналаРегистрации.Ошибка, , message);
	Возврат истина;
конецФункции //разоборатьСообщениеОбОшибке


///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНетОшибки                           = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаПараметровНастройки           = Перечисления.ТООшибкиОбщие.ОшибкаПараметровНастройки;
мОшибкаЗагрузкиДрайвера              = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиДрайвера;
мОшибкаНеизвестно                    = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно;
мОшибкаПриПодключении                = Перечисления.ТООшибкиОбщие.ОшибкаПриПодключении;
мОшибкаТестНеПройден                 = Перечисления.ТООшибкиОбщие.ОшибкаТестНеПройден;

мМодели = Новый Массив();
мМодели.Добавить("Меркурий-115Ф");
мМодели.Добавить("Меркурий-130Ф");
мМодели.Добавить("Меркурий-180Ф");
мМодели.Добавить("Меркурий-185Ф");
мМодели.Добавить("Меркурий-119Ф");

мИдентификатор = Новый УникальныйИдентификатор;
мПараметрыУстройства = Новый Структура();
мПараметрыПодключения = Новый Структура();
мВходныеПараметры = Новый Массив();
мВыходныеПараметры = Новый Массив();
мВходныеПараметрыСтруктура = Новый Структура();

мВерсияИзДрайвера = Неопределено;
мВерсияОбработки = 3.34;
мВерсияТребуемая  = "2.0.0.34";

гПутьКФайуЧека = "d:\share\checks\"; 
гИмяФайлаЧека  = "check.txt";
#КонецЕсли